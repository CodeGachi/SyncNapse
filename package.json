{
  "name": "@syncnapse/root",
  "private": true,
  "version": "0.1.0",
  "description": "SyncNapse monorepo (frontend: Next.js, backend: Nest.js, infra helpers)",
  "workspaces": [
    "frontend",
    "backend"
  ],
  "engines": {
    "node": ">=22.20.0",
    "npm": ">=10.9.0"
  },
  "scripts": {
    "ci:lint": "ENV_TARGET=dev node scripts/docker-ci.mjs lint all",
    "ci:test": "ENV_TARGET=dev node scripts/docker-ci.mjs test all",
    "ci:build": "ENV_TARGET=dev node scripts/docker-ci.mjs build all",
    "ci:lint:frontend": "ENV_TARGET=dev node scripts/docker-ci.mjs lint frontend",
    "ci:lint:backend": "ENV_TARGET=dev node scripts/docker-ci.mjs lint backend",
    "ci:test:frontend": "ENV_TARGET=dev node scripts/docker-ci.mjs test frontend",
    "ci:test:backend": "ENV_TARGET=dev node scripts/docker-ci.mjs test backend",
    "install": "npm i --ignore-scripts && npm -w backend i --ignore-scripts && npm -w backend exec prisma generate && npm -w frontend i --ignore-scripts",
    "build": "npm -w backend run build && npm -w frontend run build",
    "dev": "NODE_ENV=dev concurrently -n FRONTEND,BACKEND -c blue,green \"npm -w frontend run dev\" \"npm -w backend run start:dev\"",
    "lint": "npm -w frontend run lint && npm -w backend run lint",
    "format": "npm -w frontend run format && npm -w backend run format",
    "test": "npm -w frontend run test && npm -w backend run test",
    "test:ci": "npm -w frontend run test:ci && npm -w backend run test:ci",
    "clean": "rm -rf node_modules frontend/node_modules backend/node_modules frontend/dist frontend/.next backend/dist .env .env.dev .env.prod backend/.env .env-repo && echo '✅ Cleaned: node_modules, dist, .env files, .env-repo'",
    "clean:force": "sudo rm -rf node_modules frontend/node_modules backend/node_modules frontend/dist frontend/.next backend/dist .env .env.dev .env.prod backend/.env .env-repo && echo '✅ Force cleaned with sudo'",
    "db:up": "cd db && docker compose up -d",
    "db:down": "cd db && docker compose down",
    "db:logs": "docker logs -f syncnapse-postgres",
    "db:export:schema": "ENV_TARGET=dev node scripts/export-db-schema.mjs",
    "seed:minio": "ENV_TARGET=dev node scripts/seed-minio.mjs",
    "env:sync": "node scripts/sync-env-from-repo.mjs dev",
    "env:sync:prod": "node scripts/sync-env-from-repo.mjs prod",
    "env:push": "node scripts/push-env-to-repo.mjs dev",
    "env:push:prod": "node scripts/push-env-to-repo.mjs prod",
    "setup": "npm install && npm run env:sync && ENV_TARGET=dev node scripts/sync-envs.mjs && npm -w backend run prisma:generate && ENV_TARGET=dev node scripts/export-db-schema.mjs",
    "dev:all": "docker compose --env-file .env.dev -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.minio.yml up -d --build",
    "dev:down": "docker compose --env-file .env.dev -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.minio.yml down",
    "dev:logs": "docker compose --env-file .env.dev -f docker-compose.yml -f docker-compose.dev.yml -f docker-compose.minio.yml logs -f",
    "n8n:export:workflows": "docker compose -f docker-compose.yml -f docker-compose.dev.yml exec n8n bash -lc 'mkdir -p /exports && n8n export:workflow --all --separate --output=/exports'",
    "n8n:export:credentials": "docker compose -f docker-compose.yml -f docker-compose.dev.yml exec n8n bash -lc 'mkdir -p /exports && n8n export:credentials --all --output=/exports'",
    "n8n:import:workflows": "docker compose -f docker-compose.yml -f docker-compose.dev.yml exec n8n bash -lc 'n8n import:workflow --input=/exports'",
    "n8n:import:credentials": "docker compose -f docker-compose.yml -f docker-compose.dev.yml exec n8n bash -lc 'n8n import:credentials --input=/exports'"
  },
  "devDependencies": {
    "@aws-sdk/client-s3": "^3.705.0",
    "concurrently": "^9.0.0"
  }
}
