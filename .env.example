# Common
NODE_ENV=development
DEBUG_LEVEL=info

# Versions
NODE_VERSION=22.20.0
UID=1000
GID=1000

# Ports (public host ports)
FRONTEND_PORT_PUBLIC=3000
BACKEND_PORT_PUBLIC=4000
REDIS_PORT_PUBLIC=6379
N8N_PORT_PUBLIC=5678
POSTGRES_PORT_PUBLIC=5432

# Backend service ports (inside container / env for app)
BACKEND_PORT=4000
PORT=4000

# App environments
FRONTEND_NODE_ENV=development
BACKEND_NODE_ENV=development

# Database (Postgres for app data)
DATABASE_URL=postgresql://postgres:change_me@postgres:5432/syncnapse?schema=public
POSTGRES_USER=postgres
POSTGRES_PASSWORD=change_me
POSTGRES_DB=syncnapse

# Backend auth
GOOGLE_CLIENT_ID=google_client_id
GOOGLE_CLIENT_SECRET=google_client_secret
GOOGLE_CALLBACK_URL=http://localhost:4000/api/auth/google/callback
JWT_SECRET=development_secret_key_for_jwt_tokens_minimum_32_characters_required
JWT_ACCESS_EXPIRATION=15m
JWT_REFRESH_EXPIRATION=30d

# n8n (Queue via Redis only)
N8N_HOST=localhost
N8N_PORT=5678
N8N_PROTOCOL=http
GENERIC_TIMEZONE=Asia/Seoul
N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
N8N_SECURE_COOKIE=false
N8N_USER_MANAGEMENT_DISABLED=true
N8N_BASIC_AUTH_ACTIVE=false
N8N_BLOCK_ENV_ACCESS_IN_NODE=false
N8N_GIT_NODE_DISABLE_BARE_REPOS=true
DB_SQLITE_POOL_SIZE=5
# Optional: mute node deprecations in dev
# NODE_OPTIONS=--no-deprecation
EXECUTIONS_MODE=queue
QUEUE_BULL_REDIS_HOST=redis
QUEUE_BULL_REDIS_PORT=6379
N8N_RUNNERS_ENABLED=true
OFFLOAD_MANUAL_EXECUTIONS_TO_WORKERS=true
QUEUE_HEALTH_CHECK_ACTIVE=true
# Set a strong key for production
N8N_ENCRYPTION_KEY=

# n8n exports directory (mounted to /exports in container)
N8N_EXPORTS_DIR=./n8n-exports

# Monitoring (Grafana admin for dev; use secrets in ECS)
GF_ADMIN_USER=admin
GF_ADMIN_PASSWORD=admin

## Production (ECS runtime)
# These variables are NOT read from this file in production.
# Set them in ECS Task Definition (ideally via AWS Secrets Manager/SSM Parameter Store).
# - DATABASE_URL: External managed Postgres URL for production
# - JWT_SECRET: Strong secret for JWT signing
# - N8N_ENCRYPTION_KEY: Strong key to encrypt n8n credentials at rest
# Example (do not commit real values):
# DATABASE_URL=postgresql://<user>:<pass>@<rds-endpoint>:5432/<db>?schema=public
# JWT_SECRET=<strong_random_secret>
# N8N_ENCRYPTION_KEY=<strong_random_key>

## CI/CD (GitHub Environments secrets)
# These are used by GitHub Actions for build/deploy and are NOT stored in .env.
# Define them under GitHub → Settings → Environments (e.g., production) → Secrets.
# AWS_REGION=ap-northeast-2
# AWS_ACCOUNT_ID=123456789012
# AWS_ROLE_TO_ASSUME=arn:aws:iam::<account>:role/<role-name>
# ECR_REPO_FRONTEND=<account>.dkr.ecr.<region>.amazonaws.com/<repo-frontend>
# ECR_REPO_BACKEND=<account>.dkr.ecr.<region>.amazonaws.com/<repo-backend>
# ECR_REPO_NGINX=<account>.dkr.ecr.<region>.amazonaws.com/<repo-nginx>
# ECR_REPO_GRAFANA=<account>.dkr.ecr.<region>.amazonaws.com/<repo-grafana>
# ECR_REPO_LOKI=<account>.dkr.ecr.<region>.amazonaws.com/<repo-loki>
# ECR_REPO_PROMTAIL=<account>.dkr.ecr.<region>.amazonaws.com/<repo-promtail>
# ECS_CLUSTER=<ecs-cluster-name>
# ECS_SERVICE_FRONTEND=<ecs-service-frontend>
# ECS_SERVICE_BACKEND=<ecs-service-backend>
# ECS_SERVICE_NGINX=<ecs-service-nginx>
# ECS_SERVICE_GRAFANA=<ecs-service-grafana>
# ECS_SERVICE_LOKI=<ecs-service-loki>
# ECS_SERVICE_PROMTAIL=<ecs-service-promtail>
# ECS_TASKDEF_FAMILY_FRONTEND=<taskdef-frontend>
# ECS_TASKDEF_FAMILY_BACKEND=<taskdef-backend>
# ECS_TASKDEF_FAMILY_NGINX=<taskdef-nginx>
# ECS_TASKDEF_FAMILY_GRAFANA=<taskdef-grafana>
# ECS_TASKDEF_FAMILY_LOKI=<taskdef-loki>
# ECS_TASKDEF_FAMILY_PROMTAIL=<taskdef-promtail>
# VPC_SUBNETS=subnet-aaa,subnet-bbb
# VPC_SECURITY_GROUPS=sg-xxxx
# LOAD_BALANCER_TG_FRONTEND=arn:aws:elasticloadbalancing:<region>:<account>:targetgroup/<tg-frontend>/<id>
# LOAD_BALANCER_TG_BACKEND=arn:aws:elasticloadbalancing:<region>:<account>:targetgroup/<tg-backend>/<id>
# LOAD_BALANCER_TG_GRAFANA=arn:aws:elasticloadbalancing:<region>:<account>:targetgroup/<tg-grafana>/<id>
# LOAD_BALANCER_TG_LOKI=arn:aws:elasticloadbalancing:<region>:<account>:targetgroup/<tg-loki>/<id>
# LOAD_BALANCER_TG_PROMTAIL=arn:aws:elasticloadbalancing:<region>:<account>:targetgroup/<tg-promtail>/<id>
#
# Runtime secrets (set in ECS via SSM or Secrets Manager, but referenced by Actions during deploy):
# RUNTIME_DATABASE_URL=postgresql://<user>:<pass>@<rds-endpoint>:5432/<db>?schema=public
# RUNTIME_JWT_SECRET=<strong_random_secret>
# RUNTIME_N8N_ENCRYPTION_KEY=<strong_random_key>

# ==============================================
# Storage Configuration (MinIO for dev)
# ==============================================
# To upload sample files: npm run seed:minio
STORAGE_PROVIDER=s3
STORAGE_ENDPOINT=http://minio:9000
STORAGE_BUCKET=syncnapse-files
STORAGE_REGION=us-east-1
STORAGE_ACCESS_KEY_ID=minioadmin
STORAGE_SECRET_ACCESS_KEY=minioadmin123

# MinIO Server Configuration
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin123
MINIO_SERVER_URL=http://localhost:9000
MINIO_BROWSER_REDIRECT_URL=http://localhost:9001

# Local storage path (fallback)
STORAGE_LOCAL_PATH=./var/storage

# Cache & Performance (in-memory)
CACHE_TTL=300

# Rate Limiting
ENABLE_RATE_LIMITING=true
RATE_LIMIT_MAX=100
RATE_LIMIT_TTL=60