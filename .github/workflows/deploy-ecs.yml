name: Deploy to ECS

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
  workflow_dispatch:  # Manual trigger

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    
    env:
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      ECR_REPO_FRONTEND: ${{ secrets.ECR_REPO_FRONTEND }}
      ECR_REPO_BACKEND: ${{ secrets.ECR_REPO_BACKEND }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE_FRONTEND: ${{ secrets.ECS_SERVICE_FRONTEND }}
      ECS_SERVICE_BACKEND: ${{ secrets.ECS_SERVICE_BACKEND }}
      ECS_TASK_DEFINITION_FRONTEND: ${{ secrets.ECS_TASK_DEFINITION_FRONTEND }}
      ECS_TASK_DEFINITION_BACKEND: ${{ secrets.ECS_TASK_DEFINITION_BACKEND }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build and push images
        id: build
        run: |
          TAG="sha-${GITHUB_SHA::7}"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Build images
          docker build -t $ECR_REGISTRY/$ECR_REPO_FRONTEND:$TAG -f frontend/Dockerfile ./frontend
          docker build -t $ECR_REGISTRY/$ECR_REPO_BACKEND:$TAG -f backend/Dockerfile ./backend
          
          # Tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPO_FRONTEND:$TAG $ECR_REGISTRY/$ECR_REPO_FRONTEND:latest
          docker tag $ECR_REGISTRY/$ECR_REPO_BACKEND:$TAG $ECR_REGISTRY/$ECR_REPO_BACKEND:latest
          
          # Push all tags
          docker push $ECR_REGISTRY/$ECR_REPO_FRONTEND:$TAG
          docker push $ECR_REGISTRY/$ECR_REPO_FRONTEND:latest
          docker push $ECR_REGISTRY/$ECR_REPO_BACKEND:$TAG
          docker push $ECR_REGISTRY/$ECR_REPO_BACKEND:latest
          
          echo "âœ… Images pushed:"
          echo "  Frontend: $ECR_REGISTRY/$ECR_REPO_FRONTEND:$TAG"
          echo "  Backend:  $ECR_REGISTRY/$ECR_REPO_BACKEND:$TAG"
      
      - name: Update ECS Task Definition (Frontend)
        id: task-def-frontend
        run: |
          # Get current task definition (redirect to file to avoid logging sensitive data)
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_FRONTEND \
            --query 'taskDefinition' \
            --output json > /tmp/task-def-frontend.json 2>&1
          
          # Update image URI in task definition
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPO_FRONTEND:${{ steps.build.outputs.tag }}" \
            '.containerDefinitions[0].image = $IMAGE | 
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            /tmp/task-def-frontend.json > /tmp/new-task-def-frontend.json
          
          # Register new task definition (suppress detailed output)
          NEW_TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file:///tmp/new-task-def-frontend.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text 2>&1 | grep -v 'environment\|secret')
          
          # Clean up temp files
          rm -f /tmp/task-def-frontend.json /tmp/new-task-def-frontend.json
          
          echo "task_arn=$NEW_TASK_ARN" >> $GITHUB_OUTPUT
          echo "âœ… Frontend Task Definition updated"
      
      - name: Update ECS Task Definition (Backend)
        id: task-def-backend
        run: |
          # Get current task definition (redirect to file to avoid logging sensitive data)
          aws ecs describe-task-definition \
            --task-definition $ECS_TASK_DEFINITION_BACKEND \
            --query 'taskDefinition' \
            --output json > /tmp/task-def-backend.json 2>&1
          
          # Update image URI in task definition
          jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPO_BACKEND:${{ steps.build.outputs.tag }}" \
            '.containerDefinitions[0].image = $IMAGE | 
             del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' \
            /tmp/task-def-backend.json > /tmp/new-task-def-backend.json
          
          # Register new task definition (suppress detailed output)
          NEW_TASK_ARN=$(aws ecs register-task-definition \
            --cli-input-json file:///tmp/new-task-def-backend.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text 2>&1 | grep -v 'environment\|secret')
          
          # Clean up temp files
          rm -f /tmp/task-def-backend.json /tmp/new-task-def-backend.json
          
          echo "task_arn=$NEW_TASK_ARN" >> $GITHUB_OUTPUT
          echo "âœ… Backend Task Definition updated"
      
      - name: Deploy to ECS
        run: |
          echo "ðŸš€ Deploying to ECS..."
          
          # Update frontend service (suppress detailed output)
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE_FRONTEND" \
            --task-definition "${{ steps.task-def-frontend.outputs.task_arn }}" \
            --force-new-deployment \
            --no-cli-pager \
            --output text > /dev/null 2>&1
          
          echo "âœ… Frontend service updated"
          
          # Update backend service (suppress detailed output)
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE_BACKEND" \
            --task-definition "${{ steps.task-def-backend.outputs.task_arn }}" \
            --force-new-deployment \
            --no-cli-pager \
            --output text > /dev/null 2>&1
          
          echo "âœ… Backend service updated"
          echo ""
          echo "ðŸ“¦ Deployment Summary:"
          echo "  Cluster: $ECS_CLUSTER"
          echo "  Frontend: $ECS_SERVICE_FRONTEND"
          echo "  Backend:  $ECS_SERVICE_BACKEND"
          echo "  Image Tag: ${{ steps.build.outputs.tag }}"
