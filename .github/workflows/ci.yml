name: CI

on:
  pull_request:
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci.yml'
      - 'package.json'
      - 'package-lock.json'
  push:
    paths:
      - 'frontend/**'
      - 'backend/**'
      - '.github/workflows/ci.yml'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '22.20.0'
          cache: 'npm'
      
      - name: Install root deps
        run: npm i --ignore-scripts
      
      - name: Install workspaces deps
        run: |
          npm -w frontend i --ignore-scripts
          npm -w backend i --ignore-scripts
      
      - name: Generate Prisma Client
        run: npm -w backend run prisma:generate
      
      - name: Setup environment files
        env:
          GITHUB_TOKEN: ${{ secrets.ENV_REPO_PAT }}
        run: |
          # Configure git to use PAT for private repo (scoped to this repository only)
          git config --local url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf "git@github.com:"
          
          # Fetch environment from private repo (suppress output to avoid leaking env vars)
          npm run env:sync > /tmp/env-sync.log 2>&1 || {
            echo "❌ Environment sync failed"
            exit 1
          }
          echo "✅ Environment files synced"
          
          # Also copy to .env for Docker Compose
          cp .env.dev .env
          
          # Clean up git config to avoid token exposure in logs
          git config --local --unset url."https://x-access-token:${GITHUB_TOKEN}@github.com/".insteadOf || true
      - name: Test
        run: |
          npm -w frontend run test:ci
          npm -w backend run test:ci
      - name: Lint
        run: |
          npm -w frontend run lint
          npm -w backend run lint
      - name: Build
        run: |
          NODE_ENV=production npm -w frontend run build
          NODE_ENV=production npm -w backend run build
